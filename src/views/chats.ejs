<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cubic</title>
    <link rel="icon" type="image/x-icon" href="/images/cubic-w-nobg.ico">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style-chat.css">
</head>
<body>

    <div class="container-fluid">
        <div class="sidebar d-none d-md-block">
            <img src='/images/cubic-w-nobg.png' style="height: 20px; width: 20px; margin-left: 10px;" class="avatar-icon" alt="Avatar"> 
            <a style="text-decoration: none; color: #fff; font-size: 12px;">Cubic</a>
            <div class="friend-list-container">
                <div class="custom-scrollbar">
                    <div class="custom-scrollbar-thumb"></div>
                </div>
                <ul class="list-group" style="padding-top: 20px;" id="friendsList"></ul>
            </div>

            
    
            <div class="dropup-container">
                <div class="audio-control-menu">
                    <div class="audio-control-buttons">
                        <button class="btn btn-call btn-sm" id="headphoneButton" title="Headphone Call">
                            <i class="fa-solid fa-headphones"></i>
                        </button>
                        <button class="btn btn-mute btn-sm" id="muteButton" title="Mute voice">
                            <i class="fa-solid fa-microphone"></i>
                        </button>
                        <button class="btn btn-call btn-sm" id="disconnectCallButton" title="Disconnect Call" style="display: none;">
                            <i class="fa-solid fa-phone-slash"></i>
                        </button>
                    </div>
                    <input type="range" class="form-range range" id="volumeSlider" min="0" max="1" step="0.1" value="1">
                </div>

                <div class="btn-group dropup">
                    <button type="button" class="btn btn-sm d-flex align-items-center" data-bs-toggle="dropdown" aria-expanded="false">
                        <div class='c-avatar'>
                            <img id="avatarImg" src="<%= currentUser.avatarUrl || '/images/cubic-w.jpeg' %>" class="c-avatar_image" alt="Avatar">
                            <span class='c-avatar_status'></span>
                        </div>
                        <div class="user-info ms-2">
                            <div id="user-nickname" class="nickname"><%= currentUser.nickname %></div>
                            <div id="user-username" class="username"><%= currentUser.username %></div>
                        </div>
                        <i id="friendRequestsNotification" class="fa-regular fa-bell" style="display: none; margin-left: 5px;"></i>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modalAlterarNome"><i class="fas fa-user" style="margin-right: 10px;"></i>Alterar nome</a></li>
                        <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modalAlterarNick"><i class="far fa-user" style="margin-right: 10px;"></i>Alterar nick</a></li>
                        <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modalAlterarAvatar"><i class="fas fa-user-astronaut" style="margin-right: 10px;"></i>Alterar avatar</a></li>
                        <li><hr class="dropdown-divider" style="color: #fff; background-color: #fff;"></li>
                        <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modalFriendAdd"><i class="fa-solid fa-user-plus" style="margin-right: 10px;"></i>Adicionar amigo</a></li>
                        <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modalFriendRequests"><i class="fa-solid fa-user-group" style="margin-right: 10px;"></i>Solicitações</a></li>
                        <li><hr class="dropdown-divider" style="color: #fff; background-color: #fff;"></li>
                        <li><a class="dropdown-item" href="/auth/logout"><i class="fa-solid fa-right-from-bracket" style="margin-right: 10px;"></i>Desconectar</a></li>
                    </ul>
                </div>
            </div>
        </div>
        
    
        <div class="chat-area">
            <div class="chat-nav d-flex justify-content-between align-items-center">
                <a class="chatTitle align-items-center friend-item" id="chatTitle" style="display: none;">
                    <img class="friend-avatar me-2" src="/images/cubic-w.jpeg" id="chatAvatar" alt="Avatar"> 
                    <span id="chatUsername">username</span>
                </a>
                <div class="call-buttons" id="callButtons" style="display: none;">
                    <!--<button class="btn btn-call btn-sm me-2" id="videoCallButton" title="Video Call">
                        <i class="fa-solid fa-camera"></i>
                    </button>-->
                    <button class="btn btn-call btn-sm" id="audioCallButton" title="Audio Call">
                        <i class="fa-solid fa-phone"></i>
                    </button>
                </div>
            </div>
            <div id="chatContent"></div>
            <div class="message-input p-3">
                <input type="text" class="send-message form-control" id="messageInput" placeholder="Mensagem..." autocomplete="off">
            </div>
        </div>
    </div>
    
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;">
        <div id="characterLimitToast" class="toast align-items-center" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    A mensagem deve ter no máximo 2000 caracteres.
                </div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
    
    <div id="confirmationToast" class="confirmationToast toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
        <div class="toast-body">
            <p>Você realmente deseja remover este amigo?</p>
            <button id="confirmRemove" class="btn btn-dangerr btn-sm">Remover</button>
            <button class="btn btn-secondary btn-sm" data-bs-dismiss="toast">Cancelar</button>
        </div>
    </div>

    <div id="incommingCallToast" class="incommingCallToast toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
        <div class="toast-body">
            <p>Você está recebendo uma chamada de <a id="callerUsername" style="outline: none; color: #fff;"></a>, deseja atender?</p>
            <button id="confirmRemove" class="btn btn-success btn-sm" id="acceptCallButton">Atender</button>
            <button class="btn btn-secondary btn-sm" data-bs-dismiss="toast">Ignorar</button>
        </div>
    </div>
    
    <!-- Modais -->
    <!-- Modal Alterar Nome -->
    <div class="modal fade" id="modalAlterarNome" tabindex="-1" aria-labelledby="modalAlterarNomeLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalAlterarNomeLabel">Alterar nome de usuário</h5>
                    <button type="button" class="modal-btn btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="newName" class="form-label">Qual será seu novo nome de usuário?</label>
                            <input type="text" class="update-modals modal-control" id="newName" placeholder="Algum nome legal..." autocomplete="off">
                        </div>
                        <div id="error-message-modal-username" class="error-message-modal text-secondary"></div>
                        <button type="submit" class="btn btn-modal">Salvar</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal Alterar Nick -->
    <div class="modal fade" id="modalAlterarNick" tabindex="-1" aria-labelledby="modalAlterarNickLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalAlterarNickLabel">Alterar nome de exibição</h5>
                    <button type="button" class="modal-btn btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="newNick" class="form-label">Qual será seu novo nome de exibição?</label>
                            <input type="text" class="update-modals modal-control" id="newNick" placeholder="Algum nick legal..." autocomplete="off">
                        </div>
                        <div id="error-message-modal-nickname" class="error-message-modal text-secondary"></div>
                        <button type="submit" class="btn btn-modal" style="margin-top: 1px;">Salvar</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal Alterar Avatar -->
    <div class="modal fade" id="modalAlterarAvatar" tabindex="-1" aria-labelledby="modalAlterarAvatarLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalAlterarAvatarLabel">Alterar Avatar</h5>
                    <button type="button" class="modal-btn btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="newAvatar" class="form-label">Escolha uma imagem bem legal para o seu avatar!</label>
                            <input type="file" class="update-modals modal-control" id="newAvatar" accept="image/png, image/jpeg, image/jpg" >
                        </div>
                        <div id="error-message-modal-avatar" class="error-message-modal text-secondary"></div>
                        <button type="submit" class="btn btn-modal">Salvar</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Adicionar amigo -->
    <div class="modal fade" id="modalFriendAdd" tabindex="-1" aria-labelledby="modalFriendAddLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalFriendAddLabel">Adicionar um amigo</h5>
                    <button type="button" class="modal-btn btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="newName" class="form-label">Qual o nome de usuário do seu novo amigo?</label>
                            <input type="text" class="update-modals modal-control" id="newFriend" placeholder="Nome de usuário..." autocomplete="off">
                        </div>
                        <div id="error-message-modal-addfriend" class="error-message-modal text-secondary"></div>
                        <button type="submit" class="btn btn-modal">Adicionar</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal Solicitações -->
    <div class="modal fade" id="modalFriendRequests" tabindex="-1" aria-labelledby="modalFriendRequestsLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalFriendRequestsLabel">Pedidos de Amizade</h5>
                    <button type="button" class="modal-btn btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <ul id="friendRequestsList" class="list-group"></ul>
                    <div id="error-message-modal" class="error-message-modal text-secondary"></div>
                </div>
            </div>
        </div>
    </div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script src="https://unpkg.com/peerjs@1.5.4/dist/peerjs.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    const currentUserId = '<%= currentUser._id %>';
    const currentUsername = '<%= currentUser.username %>';
    const currentNickname = '<%= currentUser.nickname %>';
    const avatar = document.getElementById('avatarImg');
    const avatarUrl = avatar.src;
    let currentFriendPeerId = '';
    const incommingCallToast = new bootstrap.Toast(document.getElementById('incommingCallToast'));

    const socket = io({ query: { currentUserId } });

    socket.on('userStatusChanged', (data) => {
        const { userId, online, nickname, avatar } = data;
        const color = online ? '#198754' : '#c93c3e';

        // Verificações opcionais
        if (userId) {
            $(`#friend-${userId}`).css('background', color);
        }

        if (nickname) {
            $(`#friend-nickname-${userId}`).text(nickname);
        }

        if (avatar) {
            $(`#friend-avatar-${userId}`).attr('src', avatar);
        }
    });


    var peer = new Peer();

    peer.on('open', function(id) {
        console.log('My peer ID is: ' + id);

        $.ajax({
            url: '/user/update-peerid',
            method: 'POST',
            data: JSON.stringify({ userId: currentUserId, peerid: id }),
            contentType: 'application/json',
            success: function (data) {
                if (data.success) {
                    console.log("PeerId atualizado!");
                } else {
                    console.log("Ocorreu um erro ao atualizar o PeerId atualizado!" + data.error);
                }
            },
            error: function (jqXHR) {
                const errorMessage = jqXHR.responseJSON ? jqXHR.responseJSON.error : 'Erro ao atualizar o PeerID. Tente novamente.';
                console.log(errorMessage);
            }
        });
    });

    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ audio: true }).then(function(stream) {
            let currentCall = null;
            let remoteAudioStream = null;

            // Atender a chamada e fornecer a MediaStream
            peer.on('call', function(call) {
                currentCall = call;

                document.getElementById('callerUsername').innerText = call.metadata.callerUsername;
                incommingCallToast.show();

                document.getElementById('acceptCallButton').onclick = function() {
                    incommingCallToast.hide();
                    call.answer(stream);
                    call.on('stream', function(remoteStream) {
                        remoteAudioStream = remoteStream;
                        var audioElement = new Audio();
                        audioElement.srcObject = remoteStream;
                        audioElement.play();
                    });
                };
            });

            // Realizar a chamada ao clicar no botão
            document.getElementById('audioCallButton').addEventListener('click', function() {
                $.ajax({
                    url: `/friends/${currentFriendId}`,
                    method: 'GET',
                    success: function (data) {
                        if (data.friend) {
                            const friend = data.friend;

                            if(!friend.online)
                                return console.log("O seu amigo está offline, portanto não pode receber chamadas.");

                            console.log('Calling peer ID: ' + friend.peerid);

                            var call = peer.call(friend.peerid, stream, {
                                metadata: { callerUsername: currentUsername }
                            });

                            call.on('stream', function(remoteStream) {
                                remoteAudioStream = remoteStream;
                                var audioElement = new Audio();
                                audioElement.srcObject = remoteStream;
                                audioElement.play();
                            });

                        } else {
                            console.log('Dados do amigo não encontrados.');
                        }
                    },
                    error: function (jqXHR) {
                        const errorMessage = jqXHR.responseJSON ? jqXHR.responseJSON.error : 'Dados do amigo não encontrados.';
                        console.log(errorMessage);
                    }
                });
            });

            // Controlar volume e mute
            var muteButton = document.getElementById('muteButton');
            var headphoneButton = document.getElementById('headphoneButton');
            var volumeSlider = document.getElementById('volumeSlider');
            var audioElement = new Audio();
            var userHeaphone = true;
            audioElement.muted = false;

            muteButton.addEventListener('click', function() {
                const icon = muteButton.querySelector('i');
                
                if (audioElement.muted) {
                    audioElement.muted = false;
                    icon.classList.remove('fa-microphone-slash');
                    icon.classList.add('fa-microphone');
                    icon.style.color = 'white'; // Define a cor para 'white' quando o microfone está desligado
                } else {
                    audioElement.muted = true;
                    icon.classList.remove('fa-microphone');
                    icon.classList.add('fa-microphone-slash');
                    icon.style.color = '#FF6347'; // Define a cor para '#FF6347' quando o microfone está ligado
                }
            });

            headphoneButton.addEventListener('click', function() {
                const icon = headphoneButton.querySelector('i');
                
                if (userHeaphone) {
                    userHeaphone = false;
                    audioElement.volume = 0;
                    icon.style.color = '#FF6347'; // Define a cor para vermelho quando o microfone está desligado
                } else {
                    userHeaphone = true;
                    audioElement.volume = volumeSlider.value;
                    icon.style.color = 'white'; // Define a cor para verde quando o microfone está ligado
                }
            });

            volumeSlider.addEventListener('input', function() {
                audioElement.volume = volumeSlider.value;
            });
        }).catch(function(err) {
            console.error('Failed to get local stream', err);
        });
    } 
    else {
        alert('Your browser does not support the getUserMedia API.');
    }
</script>
<script src="/scripts/script.js"></script>
</body>
</html>